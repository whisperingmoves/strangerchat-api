openapi: 3.0.0
info:
  title: 陌生人聊天交友App
  version: 1.0.0
tags:
  - name: 验证码
    description: 验证码相关接口
  - name: 用户
    description: 用户相关接口
  - name: 资源
    description: 资源相关接口
  - name: 故事
    description: 故事相关接口
  - name: 帖子
    description: 帖子相关接口
  - name: 评论
    description: 评论相关接口
  - name: 通知
    description: 通知相关接口
  - name: 礼物
    description: 礼物相关接口
  - name: 商品
    description: 商品相关接口
  - name: 交易记录
    description: 交易记录相关接口
  - name: WebSocket
    description: WebSocket相关接口
paths:

  /verifications/sendCode:
    post:
      summary: 发送验证码
      tags:
        - 验证码
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mobile
              properties:
                mobile:
                  type: string
                  description: 手机号码
      responses:
        200:
          description: 发送成功
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /verifications/verifyCode:
    post:
      summary: 验证码验证
      tags:
        - 验证码
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mobile
                - code
              properties:
                mobile:
                  type: string
                  description: 手机号码
                code:
                  type: string
                  description: 验证码
                longitude:
                  type: string
                  format: float
                  description: 经度
                latitude:
                  type: string
                  format: float
                  description: 纬度
      responses:
        200:
          description: 验证成功并且手机号已注册,返回登录jwt和用户信息
          content:
            application/json:
              schema:
                required:
                  - token
                  - userId
                  - gender
                  - birthday
                  - avatar
                properties:
                  token:
                    type: string
                    description: 登录jwt
                  userId:
                    type: string
                    description: 用户ID
                  gender:
                    type: string
                    description: 性别
                  birthday:
                    type: string
                    format: date
                    description: 生日
                  avatar:
                    type: string
                    description: 头像URL
                  giftsReceived:
                    type: integer
                    description: 收到的礼物数
                  username:
                    type: string
                    description: 用户名
                  city:
                    type: string
                    description: 所在城市名称
                  followingCount:
                    type: integer
                    description: 我关注的用户数
                  followersCount:
                    type: integer
                    description: 关注我的用户数
                  visitorsCount:
                    type: integer
                    description: 我的访客数
                  freeHeatsLeft:
                    type: integer
                    description: 免费加热次数
                  coinBalance:
                    type: integer
                    description: 金币余额
                  checkedDays:
                    type: integer
                    format: int32
                    minimum: 0
                    maximum: 7
                    description: 连续签到的天数
                    example: 4
                    default: 0
                  lastCheckDate:
                    type: integer
                    format: unix timestamp
                    description: 上次签到的日期
                    example: 1578518245
        201:
          description: 验证成功但是手机号未注册,需要进入注册流程
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/register:
    post:
      summary: 用户注册
      tags:
        - 用户
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mobile
                - gender
                - birthday
                - avatar
              properties:
                mobile:
                  type: string
                  description: 手机号码
                gender:
                  type: string
                  description: 性别
                birthday:
                  type: string
                  format: date
                  description: 生日
                avatar:
                  type: string
                  description: 头像
                longitude:
                  type: string
                  format: float
                  description: 经度
                latitude:
                  type: string
                  format: float
                  description: 纬度
      responses:
        200:
          description: 注册成功
          content:
            application/json:
              schema:
                required:
                  - token
                  - userId
                properties:
                  token:
                    type: string
                    description: 登录jwt
                  userId:
                    type: string
                    description: 用户ID
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /uploadAvatar:
    post:
      summary: 上传头像
      tags:
        - 资源
      security: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
                  description: 头像图片
            encoding:
              avatar:
                contentType: image/*
      responses:
        200:
          description: 上传成功
          content:
            application/json:
              schema:
                required:
                  - url
                properties:
                  url:
                    type: string
                    description: 头像URL
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /stories:
    get:
      summary: 获取故事列表
      description: 获取发表过帖子的用户列表，按创建时间排序，分页展示
      tags:
        - 故事
      parameters:
        - name: page
          in: query
          description: 页码
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: 每页大小
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - userId
                    - avatar
                    - createTime
                  properties:
                    userId:
                      type: string
                      description: 用户ID
                    avatar:
                      type: string
                      description: 用户头像URL，半截URL，如：/uploads/xxx.png
                    username:
                      type: string
                      description: 用户名
                    createTime:
                      type: integer
                      format: int64
                      description: 最新帖子创建时间（精确到秒的Unix时间戳）
                    relation:
                      type: integer
                      enum:
                        - 0
                        - 1
                        - 2
                        - 3
                      description: |
                        与登录用户关系
                        0 - 互相关注
                        1 - 对方关注了我
                        2 - 我关注了对方
                        3 - 新用户
                      example: 0
                    firstImage:
                      type: string
                      description: 最新帖子第一张图片
                    online:
                      type: integer
                      enum:
                        - 0
                        - 1
                      description: 是否在线:0=否,1=是
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/follows:
    get:
      summary: 获取我关注用户的帖子列表
      description: 获取我关注用户发布的帖子列表，按发布时间排序，支持分页
      tags:
        - 帖子
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: 每页大小
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 100
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - authorId
                    - authorAvatar
                    - createTime
                    - content
                    - postId
                  properties:
                    authorId:
                      type: string
                      description: 作者用户ID
                    authorAvatar:
                      type: string
                      description: 作者头像
                    authorName:
                      type: string
                      description: 作者用户名
                    createTime:
                      type: integer
                      format: int64
                      description: 创建时间（精确到秒的Unix时间戳）
                    images:
                      type: array
                      maxItems: 9
                      items:
                        type: string
                        description: 照片URL
                    content:
                      type: string
                      description: 文字内容
                    city:
                      type: string
                      description: 发帖位置
                    likeCount:
                      type: integer
                      default: 0
                      description: 点赞数
                    commentCount:
                      type: integer
                      default: 0
                      description: 评论数
                    postId:
                      type: string
                      description: 帖子ID
                    isLiked:
                      type: integer
                      enum:
                        - 0
                        - 1
                      description: 是否已点赞（非必填字段，默认为0，0表示否，1表示是）
                      example: 1
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/recommended:
    get:
      summary: 获取推荐帖子列表
      description: 获取推荐帖子列表，按距离排序，支持分页
      tags:
        - 帖子
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: 每页大小
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: longitude
          in: query
          description: 经度
          schema:
            type: number
            format: float
        - name: latitude
          in: query
          description: 纬度
          schema:
            type: number
            format: float
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - authorId
                    - authorAvatar
                    - content
                    - postId
                  properties:
                    authorId:
                      type: string
                      description: 作者用户ID
                      example: "user1"
                    authorAvatar:
                      type: string
                      description: 作者头像（半截URL，如/uploads/xxx.png）
                      example: "/uploads/avatar.png"
                    authorName:
                      type: string
                      description: 作者用户名
                      example: "John123"
                    images:
                      type: array
                      maxItems: 9
                      items:
                        type: string
                        description: 照片URL（最多9张照片，每张照片为一个半截URL）
                        example:
                          - "/uploads/photo1.png"
                          - "/uploads/photo2.png"
                    content:
                      type: string
                      description: 文字内容
                      example: "这是一条帖子内容。"
                    city:
                      type: string
                      description: 发帖位置
                      example: "北京"
                    likeCount:
                      type: integer
                      default: 0
                      description: 点赞数
                      example: 10
                    commentCount:
                      type: integer
                      default: 0
                      description: 评论数
                      example: 5
                    postId:
                      type: string
                      description: 帖子ID
                      example: "123456"
                    isLiked:
                      type: integer
                      enum:
                        - 0
                        - 1
                      description: 是否已点赞（非必填字段，默认为0，0表示否，1表示是）
                      example: 1
                      default: 0
                    isFollowed:
                      type: integer
                      enum:
                        - 0
                        - 1
                      description: 是否已关注作者（非必填字段，默认为0，0表示否，1表示是）
                      example: 1
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/latest:
    get:
      summary: 获取最新帖子列表
      description: 获取最新帖子列表，按发布时间排序，支持分页，支持内容模糊匹配
      tags:
        - 帖子
      parameters:
        - name: keyword
          in: query
          description: 匹配关键词
          schema:
            type: string
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: 每页大小
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: filter
          in: query
          description: 筛选条件
          schema:
            type: integer
            description: 可使用以下值进行筛选:0=不应用任何筛选条件,1=返回我点赞过的帖子,2=返回我评论过的帖子,3=返回我收藏过的帖子
            enum: [ 0, 1, 2, 3 ]
            default: 0
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - authorId
                    - authorAvatar
                    - createTime
                    - content
                    - postId
                  properties:
                    authorId:
                      type: string
                      description: 作者用户ID
                      example: "user1"
                    authorAvatar:
                      type: string
                      description: 作者头像（半截URL，如/uploads/xxx.png）
                      example: "/uploads/avatar.png"
                    authorName:
                      type: string
                      description: 作者用户名（非必填字段）
                      example: "John123"
                    createTime:
                      type: integer
                      description: 创建时间（精确到秒的Unix时间戳）
                      example: 1627708878
                    images:
                      type: array
                      maxItems: 9
                      items:
                        type: string
                        description: 照片URL（最多9张照片，每张照片为一个半截URL）
                        example:
                          - "/uploads/photo1.png"
                          - "/uploads/photo2.png"
                    content:
                      type: string
                      description: 文字内容
                      example: "这是一条帖子内容。"
                    city:
                      type: string
                      description: 发帖位置（非必填字段）
                      example: "北京"
                    likeCount:
                      type: integer
                      default: 0
                      description: 点赞数（非必填字段，默认为0）
                      example: 10
                    commentCount:
                      type: integer
                      default: 0
                      description: 评论数（非必填字段，默认为0）
                      example: 5
                    postId:
                      type: string
                      description: 帖子ID
                      example: "123456"
                    isLiked:
                      type: integer
                      enum:
                        - 0
                        - 1
                      description: 是否已点赞（非必填字段，默认为0，0表示否，1表示是）
                      example: 1
                      default: 0
                    isFollowed:
                      type: integer
                      enum:
                        - 0
                        - 1
                      description: 是否已关注作者（非必填字段，默认为0，0表示否，1表示是）
                      example: 1
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/hot:
    get:
      summary: 获取热度帖子列表
      description: 获取热度排名前7的帖子列表
      tags:
        - 帖子
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                maxItems: 7
                items:
                  type: object
                  required:
                    - postId
                    - userId
                    - content
                  properties:
                    postId:
                      type: string
                      description: 帖子ID
                      example: "123456"
                    userId:
                      type: string
                      description: 用户ID
                      example: "user1"
                    username:
                      type: string
                      description: 作者用户名（非必填字段）
                      example: "John123"
                    content:
                      type: string
                      maxLength: 100
                      description: 帖子内容摘要（最多100个字符，多余的字符使用省略号代替）
                      example: "这是一条帖子内容摘要..."
                    hotIndex:
                      type: integer
                      default: 0
                      description: 热度指数（非必填字段，默认为0）
                      example: 10
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts:
    post:
      summary: 发布帖子
      tags:
        - 帖子
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 帖子文字内容
                  example: "这是一条帖子内容。"
                city:
                  type: string
                  description: 帖子发表时所在城市名称
                  example: "北京"
                longitude:
                  type: string
                  description: 帖子发表时所在的经度
                  example: "116.4074"
                latitude:
                  type: string
                  description: 帖子发表时所在的纬度
                  example: "39.9042"
                images:
                  type: array
                  items:
                    type: string
                    description: 帖子照片列表，最多9张照片，每张照片为一个半截URL
                    example:
                      - "/uploads/xxx1.png"
                      - "/uploads/xxx2.png"
                visibility:
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                  description: 帖子可见性（非必填字段）:0=公开可见,1=主页可见,2=自己可见
                  example: 0
                  default: 0
                atUsers:
                  type: array
                  items:
                    type: string
                    description: 艾特的用户列表，与帖子文字内容共享一个字段
                    example:
                      - "user1"
                      - "user2"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  postId:
                    type: string
                    description: 新增帖子ID
                    example: "123456"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}/heat:
    post:
      summary: 给帖子加热/取消加热
      tags:
        - 帖子
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "e69b9f6d-4e7a-4a1a-9e4c-4f4f4428ad9e"
        - name: action
          in: query
          required: true
          description: 加热操作，取值为1（加热）或0（取消加热）
          schema:
            type: integer
            enum: [ 1, 0 ]
            example: 1
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}/like:
    post:
      summary: 给帖子点赞/取消点赞
      tags:
        - 帖子
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "e69b9f6d-4e7a-4a1a-9e4c-4f4f4428ad9e"
        - name: action
          in: query
          required: true
          description: 点赞操作，取值为1（点赞）或0（取消点赞）
          schema:
            type: integer
            enum: [ 1, 0 ]
            example: 1
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/follow:
    post:
      summary: 关注用户/取消关注
      tags:
        - 用户
      parameters:
        - name: userId
          in: path
          description: 被关注用户的ID
          required: true
          schema:
            type: string
            format: uuid
            example: "e69b9f6d-4e7a-4a1a-9e4c-4f4f4428ad9e"
        - name: action
          in: query
          description: 关注操作，取值为1（关注）或0（取消关注）
          required: true
          schema:
            type: integer
            enum: [ 0, 1 ]
            example: 1
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}/comment:
    post:
      summary: 评论帖子/回复评论
      tags:
        - 帖子
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 评论内容
                  example: "这是一条评论"
                parentId:
                  type: string
                  description: 父级评论ID(回复评论时必填)
                  example: "5dbf5fd3-2a3e-4b2a-b9ed-6c6e4f707a4f"
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "e69b9f6d-4e7a-4a1a-9e4c-4f4f4428ad9e"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentId:
                    type: string
                    description: 新增评论的ID
                    example: "c1a1d3f2-4b2a-4e7a-b9ed-6c6e4f707a4f"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /comments/{commentId}:
    delete:
      summary: 删除评论
      tags:
        - 评论
      parameters:
        - name: commentId
          in: path
          required: true
          description: 评论ID
          schema:
            type: string
            format: uuid
            example: "8fff-4bb9-8bed-bafc84593c84"
            default: 无
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}/collect:
    post:
      summary: 收藏/取消收藏帖子
      tags:
        - 帖子
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - operation
              properties:
                operation:
                  type: integer
                  enum: [ 1, 0 ]
                  description: 操作类型，1-收藏，0-取消收藏
                  example: 1
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}/share:
    post:
      summary: 分享帖子
      tags:
        - 帖子
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sharePlatform
              properties:
                sharePlatform:
                  type: integer
                  enum: [ 1, 2, 3 ]
                  description: 分享平台，1-微信，2-QQ，3-微博
                  example: 1
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /comments/{commentId}/like:
    post:
      summary: 评论点赞/取消点赞
      tags:
        - 评论
      parameters:
        - name: commentId
          in: path
          required: true
          description: 评论ID
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - operation
              properties:
                operation:
                  type: integer
                  enum: [ 1, 0 ]
                  description: 操作类型，1-点赞，0-取消点赞
                  example: 1
      responses:
        200:
          description: 成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}:
    get:
      summary: 获取帖子详情
      tags:
        - 帖子
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                required:
                  - authorId
                  - authorAvatar
                  - createTime
                  - content
                  - postId
                properties:
                  authorId:
                    type: string
                    format: uuid
                    description: 作者用户ID
                    example: "d87612b3-5c4d-5f65-9b95-3fc9a2c769bf"
                  authorAvatar:
                    type: string
                    format: url
                    description: 作者用户头像
                    example: "/uploads/avatar.png"
                  authorName:
                    type: string
                    description: 作者用户名
                    example: "小明"
                  createTime:
                    type: integer
                    format: unix timestamp
                    description: 帖子创建时间
                    example: 1578518245
                  isFollowed:
                    type: integer
                    default: 0
                    description: 当前登录用户是否已关注作者:0=否,1=是
                  images:
                    type: array
                    maxItems: 9
                    items:
                      type: string
                      format: url
                      description: 帖子图片
                      example: "/uploads/image1.png"
                  content:
                    type: string
                    description: 帖子文字内容
                    example: "今天天气真好!"
                  city:
                    type: string
                    description: 帖子发布位置
                    example: "北京"
                  likeCount:
                    type: integer
                    default: 0
                    description: 点赞数
                    example: 10
                  commentCount:
                    type: integer
                    default: 0
                    description: 评论数
                    example: 20
                  shareCount:
                    type: integer
                    default: 0
                    description: 分享数
                    example: 5
                  postId:
                    type: string
                    format: uuid
                    description: 帖子ID
                    example: "f460e1ee-6c54-4b01-90e6-d701748f0851"
                  isLiked:
                    type: integer
                    default: 0
                    description: 当前登录用户是否已点赞:0=否,1=是
                  isCollected:
                    type: integer
                    default: 0
                    description: 当前登录用户是否已收藏:0=否,1=是
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}/comments:
    get:
      summary: 获取帖子评论列表
      tags:
        - 帖子
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页数据量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /comments/{commentId}/replies:
    get:
      summary: 获取评论回复列表
      tags:
        - 评论
      parameters:
        - name: commentId
          in: path
          required: true
          description: 评论ID
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页数据量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/me/posts:
    get:
      summary: 获取我的帖子列表
      tags:
        - 用户
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页数据量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - postId
                    - createTime
                    - content
                  properties:
                    postId:
                      type: string
                      format: uuid
                      description: 帖子唯一ID
                      example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
                    createTime:
                      type: integer
                      format: unix timestamp
                      description: 帖子创建时间
                      example: 1578518245
                    content:
                      type: string
                      description: 帖子文字内容
                      example: 今天天气真好!
                    images:
                      type: array
                      maxItems: 9
                      items:
                        type: string
                        format: url
                        description: 图片URL
                        example: /uploads/image1.png
                    city:
                      type: string
                      format: city name
                      description: 帖子发布时用户所在城市名称
                      example: 北京
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/me/posts/{postId}:
    get:
      summary: 获取我的帖子详情
      description: 该接口允许登录用户获取自己发表的某篇帖子的详情。
      tags:
        - 用户
      parameters:
        - name: postId
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                required:
                  - createTime
                  - content
                  - postId
                properties:
                  createTime:
                    type: integer
                    format: unix timestamp
                    description: 帖子创建时间，UNIX时间戳格式，精确到秒
                    example: 1578518245
                  images:
                    type: array
                    maxItems: 9
                    items:
                      type: string
                      format: url
                      description: 帖子图片URL列表
                      example:
                        - /uploads/image1.png
                        - /uploads/image2.png
                  content:
                    type: string
                    description: 帖子文字内容
                    example: 今天天气真好!
                  city:
                    type: string
                    format: city name
                    description: 帖子发表时用户所在城市名称
                    example: 北京
                  likeCount:
                    type: integer
                    default: 0
                    description: 帖子获得的赞数
                    example: 10
                  commentCount:
                    type: integer
                    default: 0
                    description: 帖子获得的评论数
                    example: 20
                  shareCount:
                    type: integer
                    default: 0
                    description: 帖子被分享的次数
                    example: 5
                  postId:
                    type: string
                    format: uuid
                    description: 帖子唯一ID
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  isLiked:
                    type: integer
                    default: 0
                    description: 当前登录用户是否点赞，0-未点赞，1-已点赞
                    example: 1
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /uploadPost:
    post:
      summary: 上传帖子照片
      tags:
        - 资源
      security: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - post
              properties:
                post:
                  type: string
                  format: binary
                  description: 帖子照片
            encoding:
              post:
                contentType: image/*
      responses:
        200:
          description: 上传成功
          content:
            application/json:
              schema:
                required:
                  - url
                properties:
                  url:
                    type: string
                    description: 照片URL
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/interaction:
    get:
      summary: 获取交互类通知列表
      tags:
        - 通知
      parameters:
        - name: page
          in: query
          description: 分页页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页通知数量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功响应
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - notificationId
                    - userAvatar
                    - userId
                    - interactionType
                    - interactionTime
                    - postId
                  properties:
                    notificationId:
                      type: string
                      description: 通知的 ID
                      example: "123456"
                    userAvatar:
                      type: string
                      description: 其他用户的头像 URL
                      example: /order/xxx.png
                    userId:
                      type: string
                      description: 其他用户的 ID
                      example: user123
                    userName:
                      type: string
                      description: 其他用户的用户名
                      example: John Doe
                    interactionType:
                      type: integer
                      description: |
                        交互类型 (0: 给帖子点赞, 1: 评论帖子, 2: 分享帖子, 3: 收藏帖子, 4: 评论点赞, 5: 回复评论)
                      example: 0
                      enum:
                        - 0
                        - 1
                        - 2
                        - 3
                        - 4
                        - 5
                    interactionTime:
                      type: integer
                      description: 交互发生的时间 (精确到秒的 UNIX 时间戳)
                      example: 1629876543
                    postId:
                      type: string
                      format: uuid
                      description: 帖子唯一ID
                      example: d290f1ee-6c54-4b01-90e6-d701748f0851
                    postImage:
                      type: string
                      description: 相关帖子的照片列表中的第一张照片的 URL（可选）
                      example: /order/xxx.png
                    readStatus:
                      type: integer
                      description: |
                        通知的已读状态 (0: 未读, 1: 已读, 默认值: 0)
                      example: 0
                      enum:
                        - 0
                        - 1
                      default: 0
                    commentId:
                      type: string
                      description: 评论 ID
                      example: "123456"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/interaction/{notificationId}/read:
    patch:
      summary: 将指定交互类通知标记为已读
      tags:
        - 通知
      parameters:
        - name: notificationId
          in: path
          description: 通知的 ID
          required: true
          schema:
            type: string
            example: 123456
      responses:
        200:
          description: 成功响应
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/status:
    get:
      summary: 获取状态类通知列表
      tags:
        - 通知
      parameters:
        - name: page
          in: query
          description: 分页页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页通知数量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功响应
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - notificationId
                    - userAvatar
                    - userId
                    - statusType
                    - statusTime
                  properties:
                    notificationId:
                      type: string
                      description: 通知的 ID
                      example: "123456"
                    userAvatar:
                      type: string
                      description: 其他用户的头像 URL
                      example: /order/xxx.png
                    userId:
                      type: string
                      description: 其他用户的 ID
                      example: user123
                    userName:
                      type: string
                      description: 其他用户的用户名
                      example: John Doe
                    statusType:
                      type: integer
                      description: |
                        状态类型 (0: 关注, 1: 访问主页)
                      example: 0
                      enum:
                        - 0
                        - 1
                      default: 0
                    statusTime:
                      type: integer
                      description: 状态发生的时间 (精确到秒的 UNIX 时间戳)
                      example: 1629876543
                    readStatus:
                      type: integer
                      description: |
                        通知的已读状态 (0: 未读, 1: 已读, 默认值: 0)
                      example: 0
                      enum:
                        - 0
                        - 1
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/status/{notificationId}/read:
    patch:
      summary: 将指定状态类通知标记为已读
      tags:
        - 通知
      parameters:
        - name: notificationId
          in: path
          description: 要标记为已读的通知 ID
          required: true
          schema:
            type: string
            example: "123456"
      responses:
        200:
          description: 成功响应
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/gift:
    get:
      summary: 获取礼物类通知列表
      tags:
        - 通知
      parameters:
        - name: page
          in: query
          description: 分页页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页通知数量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功响应
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - notificationId
                    - userAvatar
                    - userId
                    - giftQuantity
                    - giftName
                    - giftTime
                  properties:
                    notificationId:
                      type: string
                      description: 通知的 ID
                      example: "123456"
                    userAvatar:
                      type: string
                      description: 其他用户的头像 URL
                      example: /order/xxx.png
                    userId:
                      type: string
                      description: 其他用户的 ID
                      example: user123
                    userName:
                      type: string
                      description: 其他用户的用户名
                      example: John Doe
                    giftQuantity:
                      type: integer
                      description: 礼物数量
                      example: 3
                    giftName:
                      type: string
                      description: 礼物名称
                      example: Flower Bouquet
                    giftTime:
                      type: integer
                      description: 送礼的时间 (精确到秒的 UNIX 时间戳)
                      example: 1629876543
                    readStatus:
                      type: integer
                      description: |
                        通知的已读状态 (0: 未读, 1: 已读, 默认值: 0)
                      example: 0
                      enum:
                        - 0
                        - 1
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/gift/{notificationId}/read:
    patch:
      summary: 将指定礼物类通知标记为已读
      tags:
        - 通知
      parameters:
        - name: notificationId
          in: path
          description: 要标记为已读的通知 ID
          required: true
          schema:
            type: string
            example: "123456"
      responses:
        200:
          description: 成功响应
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/system:
    get:
      summary: 获取系统类通知列表
      tags:
        - 通知
      parameters:
        - name: page
          in: query
          description: 分页页码
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: pageSize
          in: query
          description: 每页通知数量
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
            example: 10
      responses:
        200:
          description: 成功响应
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - notificationId
                    - notificationTitle
                    - notificationContent
                    - notificationTime
                  properties:
                    notificationId:
                      type: string
                      description: 通知的 ID
                      example: "123456"
                    notificationTitle:
                      type: string
                      description: 通知标题
                      example: 系统更新通知
                    notificationContent:
                      type: string
                      description: 通知内容
                      example: 新版本已发布，请更新应用以享受最新功能。
                    notificationTime:
                      type: integer
                      description: 通知发布时间 (精确到秒的 UNIX 时间戳)
                      example: 1629876543
                    readStatus:
                      type: integer
                      description: |
                        通知的已读状态 (0: 未读, 1: 已读, 默认值: 0)
                      example: 0
                      enum:
                        - 0
                        - 1
                      default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /notifications/system/{notificationId}/read:
    patch:
      summary: 将指定系统类通知标记为已读
      tags:
        - 通知
      parameters:
        - name: notificationId
          in: path
          description: 要标记为已读的通知 ID
          required: true
          schema:
            type: string
            example: "123456"
      responses:
        200:
          description: 成功响应
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/following:
    get:
      summary: 获取我关注的用户列表
      tags:
        - 用户
      description: 获取当前用户关注的用户列表，支持分页和模糊查询。
      parameters:
        - name: page
          in: query
          description: 分页页码，从1开始。
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          description: 分页大小，默认每页10条。
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: keyword
          in: query
          description: 用户名关键词。
          required: false
          schema:
            type: string
      responses:
        200:
          description: 成功获取用户列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/followers:
    get:
      summary: 获取关注我的用户列表
      tags:
        - 用户
      description: 获取关注当前用户的用户列表，支持分页和模糊查询。
      parameters:
        - name: page
          in: query
          description: 分页页码，从1开始。
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          description: 分页大小，默认每页10条。
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: keyword
          in: query
          description: 用户名关键词。
          required: false
          schema:
            type: string
      responses:
        200:
          description: 成功获取用户列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/friends:
    get:
      summary: 获取互相关注的用户列表
      tags:
        - 用户
      description: 获取当前用户和其互相关注的用户列表，支持分页和模糊查询。
      parameters:
        - name: page
          in: query
          description: 分页页码，从1开始。
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          description: 分页大小，默认每页10条。
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: keyword
          in: query
          description: 用户名关键词。
          required: false
          schema:
            type: string
      responses:
        200:
          description: 成功获取用户列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/checkin/check:
    post:
      summary: 执行签到
      tags:
        - 用户
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                required:
                  - checkedDays
                properties:
                  checkedDays:
                    type: integer
                    format: int32
                    minimum: 0
                    maximum: 7
                    description: 连续签到的天数
                    example: 4
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/profile:
    patch:
      summary: 修改用户资料
      tags:
        - 用户
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  description: 新的头像 URL
                  example: "/order/xxx.png"
                username:
                  type: string
                  description: 新的用户名
                  example: "John Doe"
                  minLength: 1
                  maxLength: 30
                city:
                  type: string
                  description: 新的所在城市名称
                  example: "New York"
                  maxLength: 50
                longitude:
                  type: string
                  format: float
                  description: 经度
                latitude:
                  type: string
                  format: float
                  description: 纬度
      responses:
        200:
          description: 用户资料修改成功
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      summary: 获取用户详情
      tags:
        - 用户
      parameters:
        - name: userId
          in: path
          description: 用户 ID
          required: true
          schema:
            type: string
          example: "6123456789abcdef0123456"
      responses:
        200:
          description: 用户详情获取成功
          content:
            application/json:
              schema:
                type: object
                required:
                  - avatar
                properties:
                  avatar:
                    type: string
                    description: 头像 URL
                    example: "/order/xxx.png"
                  username:
                    type: string
                    description: 用户名
                    example: "John Doe"
                    minLength: 1
                    maxLength: 30
                  city:
                    type: string
                    description: 所在城市名称
                    example: "New York"
                    maxLength: 50
                  followingCount:
                    type: integer
                    description: 关注用户数量
                    example: 10
                    default: 0
                  followersCount:
                    type: integer
                    description: 关注 ta 的用户数量
                    example: 20
                    default: 0
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /gifts:
    get:
      summary: 获取礼物列表
      tags:
        - 礼物
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 每页大小
      responses:
        200:
          description: 成功获取礼物列表
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - image
                    - name
                    - value
                  properties:
                    id:
                      type: string
                      description: 礼物 ID
                      example: "gift001"
                    image:
                      type: string
                      description: 礼物图片 URL
                      example: "/order/gift001.png"
                    name:
                      type: string
                      description: 礼物名称
                      example: "热气球"
                      maxLength: 50
                    value:
                      type: integer
                      description: 礼物价值（金币数）
                      example: 100
                      minimum: 1
                      maximum: 10000
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /gifts/send:
    post:
      summary: 向指定用户赠送指定数量的指定礼物
      tags:
        - 礼物
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - receiverId
                - giftId
                - quantity
              properties:
                receiverId:
                  type: string
                  description: 接收礼物的用户 ID
                  example: "user001"
                giftId:
                  type: string
                  description: 礼物 ID
                  example: "gift001"
                quantity:
                  type: integer
                  description: 赠送数量
                  example: 3
                  minimum: 1
                  maximum: 100
      responses:
        200:
          description: 成功赠送礼物
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/me/gifts/received:
    get:
      summary: 获取当前登录用户收礼的统计信息
      tags:
        - 用户
      parameters:
        - in: query
          name: range
          description: 时间范围，0 表示全部时间，1 表示近一周，2 表示近一个月
          required: false
          schema:
            type: integer
            enum: [ 0, 1, 2 ]
            example: 1
            default: 0
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: 礼物数量和排名信息数组
                items:
                  type: object
                  required:
                    - userId
                    - count
                    - currentRanking
                    - diff
                    - avatar
                  properties:
                    userId:
                      type: string
                      description: 送礼者的用户 ID
                      example: "60f1d8be4f3c5f1c20a11e40"
                    count:
                      type: integer
                      description: 送礼者在指定时间范围内送给当前用户的礼物数量
                      example: 10
                      minimum: 0
                      maximum: 1000
                    currentRanking:
                      type: integer
                      description: 送礼者在指定时间范围内送给当前用户的礼物排名，排名越高表示送的礼物越多
                      example: 1
                      minimum: 1
                    diff:
                      type: integer
                      description: 送礼者在指定时间范围内送给当前用户的礼物排名变化情况，正数表示排名上升，负数表示排名下降
                      example: 0
                    username:
                      type: string
                      description: 送礼者的用户名
                      example: "user1"
                      maxLength: 50
                    avatar:
                      type: string
                      description: 送礼者的头像 URL
                      example: "avatar1.jpg"
                      maxLength: 255
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /products/coins:
    get:
      summary: 获取金币商品列表
      tags:
        - 商品
      parameters:
        - in: query
          name: page
          description: 页码，从 1 开始，默认为 1
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
            default: 1
        - in: query
          name: pageSize
          description: 每页显示的记录数，默认为 10
          required: false
          schema:
            type: integer
            minimum: 1
            example: 10
            default: 10
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: 金币商品列表
                items:
                  type: object
                  required:
                    - productId
                    - coins
                    - price
                    - currency
                  properties:
                    productId:
                      type: string
                      description: 商品 ID
                      example: "coin001"
                    coins:
                      type: integer
                      description: 商品包含的金币数量
                      example: 1000
                      minimum: 1
                      maximum: 100000
                    originalPrice:
                      type: integer
                      description: 商品原价，单位是分
                      example: 1000
                      minimum: 1
                      maximum: 10000000
                    price:
                      type: integer
                      description: 商品现价，单位是分
                      example: 900
                      minimum: 1
                      maximum: 10000000
                    currency:
                      type: string
                      description: 商品价格使用的货币代码，例如 CNY、USD、EUR 等
                      example: "CNY"
                      maxLength: 10
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /products/coins/{productId}/buy:
    post:
      summary: 购买金币商品
      tags:
        - 商品
      parameters:
        - in: path
          name: productId
          description: 金币商品 ID
          required: true
          schema:
            type: string
            example: "coin001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receipt:
                  type: string
                  description: 第三方支付服务回调的凭据
                  example: "eyJhbGciOiAiUlMyNTYiLCAidHlwIjogIkpXVCJ9..."
              required:
                - receipt
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /transactions/coins:
    get:
      summary: 获取金币交易记录列表
      tags:
        - 交易记录
      parameters:
        - in: query
          name: page
          description: 页码，从 1 开始，默认为 1
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
            default: 1
        - in: query
          name: pageSize
          description: 每页显示的记录数，默认为 10
          required: false
          schema:
            type: integer
            minimum: 1
            example: 10
            default: 10
        - in: query
          name: date
          description: 筛选指定日期的记录，格式为 YYYY-MM-DD，若不传则返回所有记录
          required: false
          schema:
            type: string
            format: date
            example: '2022-01-01'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: 交易记录列表
                items:
                  type: object
                  required:
                    - id
                    - createdAt
                    - currency
                    - amount
                  properties:
                    id:
                      type: string
                      description: 交易记录 ID
                      example: "613f192d7d7fbb4e52c4a7f1"
                    createdAt:
                      type: integer
                      format: int64
                      description: 交易记录的创建时间，精确到秒的 Unix 时间戳
                      example: 1662249209
                    currency:
                      type: string
                      description: 交易的货币类型
                      example: "USD"
                    amount:
                      type: number
                      format: float
                      description: 交易的金额
                      example: 0.99
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /socket.io:
    get:
      summary: 连接到 WebSocket
      responses:
        101:
          description: 切换协议
      tags:
        - WebSocket

  /notifications:
    post:
      summary: 服务端主动向客户端推送消息
      tags:
        - WebSocket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - data
              properties:
                type:
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                  description: 消息类型，0表示nearby_users，1表示online_users，2表示unread_notifications_count
                  example: 0
                data:
                  type: object
                  anyOf:
                    - $ref: '#/components/schemas/nearestUsers'
                    - $ref: '#/components/schemas/onlineUsers'
                    - $ref: '#/components/schemas/unreadNotificationsCount'
      responses:
        200:
          description: 消息推送成功
components:
  responses:
    Unauthorized:
      description: 未授权
      content:
        application/json:
          schema:
            required:
              - message
            properties:
              message:
                type: string
                description: 错误信息

    BadRequest:
      description: 错误的请求
      content:
        application/json:
          schema:
            required:
              - message
            properties:
              message:
                type: string
                description: 错误信息

    Forbidden:
      description: 禁止访问
      content:
        application/json:
          schema:
            required:
              - message
            properties:
              message:
                type: string
                description: 错误信息

    NotFound:
      description: 找不到页面
      content:
        application/json:
          schema:
            required:
              - message
            properties:
              message:
                type: string
                description: 错误信息

    InternalServerError:
      description: 内部服务器错误
      content:
        application/json:
          schema:
            required:
              - message
            properties:
              message:
                type: string
                description: 错误信息
  schemas:
    Comment:
      type: object
      required:
        - userId
        - avatar
        - createTime
        - content
        - commentId
      properties:
        userId:
          type: string
          format: uuid
          description: 用户ID
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        avatar:
          type: string
          format: url
          description: 用户头像
          example: /uploads/avatar.png
        username:
          type: string
          description: 用户名
          example: 小明
        createTime:
          type: integer
          format: unix timestamp
          description: 评论创建时间
          example: 1578518245
        content:
          type: string
          description: 评论内容
          example: 这个帖子真好看!
        commentId:
          type: string
          format: uuid
          description: 评论ID
          example: f460e1ee-6c54-4b01-90e6-d701748f0852
    FollowUser:
      type: array
      description: 用户列表
      items:
        type: object
        required:
          - userId
          - userAvatar
        properties:
          userId:
            type: string
            description: 用户id
            example: "612f8c4b241cd1002208d7c8"
          userAvatar:
            type: string
            description: 用户头像url，形如/order/xxx.png
            example: "/order/123.png"
          username:
            type: string
            description: 用户名
            example: "张三"
          latestPostContent:
            type: string
            description: 用户最新的帖子文字内容，最多100个字符，多出的字符用省略号代替
            example: "这是一条最新的帖子内容"
    nearestUsers:
      type: object
      properties:
        users:
          type: array
          description: 最近的5位用户信息
          items:
            type: object
            required:
              - userId
              - avatarUrl
            properties:
              userId:
                type: string
                description: 用户 ID
                example: "user001"
              avatarUrl:
                type: string
                description: 用户头像 URL
                example: "/order/xxx.png"
              username:
                type: string
                description: 用户名
                example: "张三"
              distance:
                type: number
                description: 距离当前用户的距离，以公里为单位
                example: 1.23
                minimum: 0
    onlineUsers:
      type: object
      properties:
        online:
          type: integer
          description: 当前系统在线总人数
          example: 12345
          minimum: 0
    unreadNotificationsCount:
      type: object
      properties:
        count:
          type: integer
          description: 未读通知总数
          example: 5
          minimum: 0
security:
  - JWTAuth: [ ]
